#!/usr/bin/env python3

"""
ROS Node to Execute Motion using 2D Vision Sensor 
Topics Subscribed by Node

    /camera/image_raw
    /darknet_ros/bounding_boxes

Topics Published by Node

    /centroid/draw_centroid
    /centroid/x_pos
    /centroid/y_pos
    /centroid/x_pos_wc
    /centroid/y_pos_wc

PreRequisites:

    Darknet ROS Package in ROS Workspace (https://github.com/LeggedRobotics/darknet_ros)
"""
import rospy
import moveit_commander
import moveit_msgs.msg
import sys
from std_msgs.msg import String
from std_msgs.msg import Float64

class MotionPlanner():
    def shutdown_cb (self, shutdown_msg):
        self.shutdown_yes = False
        self.shutdown_cmd = shutdown_msg.data
        #print (shutdown_msg.data)
        #print (self.shutdown_cmd)
        if (self.shutdown_cmd == "shutdown"):
            self.shutdown_yes = True
            print ("Shutdown Call Received")
        else:
            shutdown_yes = False
    def object_class_cb(self, object_class_msg):
        self.obj_class = object_class_msg.data
    def object_probability_cb(self, object_probability_msg):
        self.object_probability = object_probability_msg.data
    def __init__(self):
        self.shutdown_yes = False
        self.web_node_is_published = False
        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node("execute_motion")
        active_pub = rospy.Publisher("/csim_simulation/active", String, queue_size=10)
        manipulator = moveit_commander.MoveGroupCommander("manipulator")
        manipulator.allow_replanning(True)
        manipulator.set_goal_orientation_tolerance(0.02)
        manipulator.set_goal_tolerance(0.1)
        manipulator.set_named_target("home")
        manipulator.go()
        active_pub.publish("deactivate")
        rospy.wait_for_message("/object_class", String, timeout=None)
        rospy.Subscriber("/object_class", String, self.object_class_cb )
        published_topics = rospy.get_published_topics("/my_robotic_arm")
        if (len(published_topics)!= 0):
            #print ("Moving to Command")
            rospy.Subscriber("/my_robotic_arm/shutdown", String, self.shutdown_cb )
            self.web_node_is_published = True
        rospy.Subscriber("/object_probability", Float64, self.object_probability_cb)
        self.end_effector_link = manipulator.get_end_effector_link()
        #end_effector_link = manipulator.set_end_effector_link("link_5_b")
        print (self.end_effector_link)
        self.start_pose = manipulator.get_current_pose(self.end_effector_link).pose
        print(self.start_pose)
        self.is_picked = False
        #print (self.shutdown_cmd)
        #if (self.web_node_is_published == True):
        #    if (self.shutdown_cmd == "shutdown"):
        #        rospy.loginfo("Shutting Down!")
        #        rospy.shutdown()
        #    else:
        #        pass
        while not rospy.is_shutdown():

            manipulator.allow_replanning(True)
            manipulator.set_goal_tolerance(0.02)
            manipulator.set_goal_orientation_tolerance(0.1)
            manipulator.set_named_target("home")
            manipulator.go()
            rospy.sleep(10)
            if (self.web_node_is_published == True and self.shutdown_yes == True):
                print ("Shutting Down!")
                rospy.loginfo("Shutting Down!")
                #rospy.shutdown()
                break
            #elif (self.web_node_is_published == True and self.)
            elif (self.object_probability>0.90):
                active_pub.publish("activate")
                manipulator.allow_replanning(True)
                manipulator.set_goal_tolerance(0.02)
                manipulator.set_goal_orientation_tolerance(0.1)
                manipulator.set_named_target("pick")
                manipulator.go()
                rospy.sleep(10)
                self.pick_pose = manipulator.get_current_pose(self.end_effector_link).pose
                print(self.pick_pose)
                self.is_picked = True
            else:
                while (self.object_probability<0.90):
                    rospy.sleep(4)
                    if (self.shutdown_yes == True):
                        rospy.loginfo("Shutting Down!")
                        #rospy.shutdown()
                        break
                    elif (self.object_probability>=0.90):
                        active_pub.publish("activate")
                        manipulator.allow_replanning(True)
                        manipulator.set_goal_tolerance(0.02)
                        manipulator.set_goal_orientation_tolerance(0.1)
                        manipulator.set_named_target("pick")
                        manipulator.go()
                        rospy.sleep(10)
                        self.pick_pose = manipulator.get_current_pose(self.end_effector_link).pose
                        print(self.pick_pose)
                        self.is_picked = True
                        if (self.is_picked == True):
                            break
                    else:
                        continue
            if (self.web_node_is_published == True and self.shutdown_yes == True):
                rospy.loginfo("Shutting Down the System")
                break
            manipulator.allow_replanning(True)
            manipulator.set_goal_tolerance(0.02)
            manipulator.set_goal_orientation_tolerance(0.1)
            manipulator.set_named_target("home")
            manipulator.go()

            rospy.sleep(5)

            #if (self.obj_class == "" or self.object_probability<0.92):
                #manipulator.allow_replanning(True)
                #manipulator.set_goal_orientation_tolerance(0.1)
                #manipulator.set_goal_tolerance(0.02)
                #manipulator.set_named_target("home")
                #manipulator.go()
            #if (self.obj_class == "circle" and self.object_probability>=0.92):
            if (self.is_picked == True and self.obj_class == "circle"):
                if (self.web_node_is_published == True and self.shutdown_yes ==True):
                    rospy.loginfo("Shutting Down")
                    break
                else:
                    manipulator.allow_replanning(True)
                    manipulator.set_goal_tolerance(0.02)
                    manipulator.set_goal_orientation_tolerance(0.1)
                    manipulator.set_named_target("place")
                    manipulator.go()
                    rospy.sleep(6)
                    active_pub.publish("deactivate")
                    rospy.sleep(5)
            #elif (self.obj_class == "square" and self.object_probability>=0.92):
            elif (self.is_picked == True and self.obj_class == "square"):
                if (self.web_node_is_published == True and self.shutdown_yes == True):
                    rospy.loginfo("shutting Down!")
                    #rospy.shutdown()
                    break
                else:
                    manipulator.allow_replanning(True)
                    manipulator.set_goal_tolerance(0.02)
                    manipulator.set_goal_orientation_tolerance(0.1)
                    manipulator.set_named_target("place_red")
                    manipulator.go()
                    rospy.sleep(6)
                    active_pub.publish("deactivate")
                    rospy.sleep(5)

            manipulator.allow_replanning(True)
            manipulator.set_goal_tolerance(0.02)
            manipulator.set_goal_orientation_tolerance(0.1)
            manipulator.set_named_target("home")
            manipulator.go()
            if (self.web_node_is_published == True and self.shutdown_yes == True):
                rospy.loginfo("Shutting Down!")
                #rospy.shutdown()
                break
            rospy.sleep(15)
            #moveit_commander.roscpp_shutdown()
if __name__ == "__main__":
    MotionPlanner()
#    try:
#        MotionPlanner()
#        rospy.spin()
#    except:
#        rospy.ROSInterruptException
#        print("Node Terminated")
#

